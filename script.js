const net = new brain.NeuralNetwork();

const data = [
  { input: { r: 0, g: 0, b: 0 }, output: [1] },
  { input: { r: 1, g: 1, b: 1 }, output: [0] },
  {
    input: {
      r: 0.682234728742964,
      g: 0.6788612529588685,
      b: 0.8748602702287411,
    },
    output: [0],
  },
  {
    input: {
      r: 0.127764740278564,
      g: 0.67172173630101,
      b: 0.13112576809718357,
    },
    output: [1],
  },
  {
    input: {
      r: 0.010219756966817872,
      g: 0.14747786838731103,
      b: 0.8508948080870002,
    },
    output: [1],
  },
  {
    input: {
      r: 0.0441228111139802,
      g: 0.007760623185141702,
      b: 0.027602678935672254,
    },
    output: [1],
  },
  {
    input: {
      r: 0.33466188015885057,
      g: 0.6809620842963116,
      b: 0.5648075842339491,
    },
    output: [0],
  },
  {
    input: {
      r: 0.6292234211294621,
      g: 0.7489509052699368,
      b: 0.6244997388872544,
    },
    output: [0],
  },
  {
    input: {
      r: 0.10268249836643739,
      g: 0.2825718884136146,
      b: 0.3529363909144996,
    },
    output: [1],
  },
  {
    input: {
      r: 0.8995258753638029,
      g: 0.29742883901289585,
      b: 0.39864656908138363,
    },
    output: [0],
  },
  {
    input: {
      r: 0.3629601554768669,
      g: 0.8132882019653902,
      b: 0.4803751661107223,
    },
    output: [0],
  },
  {
    input: {
      r: 0.22411639410278195,
      g: 0.42726375850797127,
      b: 0.1769401400620263,
    },
    output: [1],
  },
  {
    input: {
      r: 0.30223195332956654,
      g: 0.253592434263439,
      b: 0.8275093875779242,
    },
    output: [1],
  },
  {
    input: {
      r: 0.5236506560785954,
      g: 0.9888454270522689,
      b: 0.0670720832469982,
    },
    output: [0],
  },
  {
    input: {
      r: 0.7540689916450549,
      g: 0.06773421236430832,
      b: 0.3881221651213065,
    },
    output: [1],
  },
  {
    input: {
      r: 0.5618609179998231,
      g: 0.08222639258266207,
      b: 0.15461882823638073,
    },
    output: [1],
  },
  {
    input: {
      r: 0.3444329997092488,
      g: 0.25004854785727626,
      b: 0.582201904218548,
    },
    output: [1],
  },
  {
    input: {
      r: 0.5976978894519884,
      g: 0.10434259043473681,
      b: 0.28594431771384854,
    },
    output: [1],
  },
  {
    input: {
      r: 0.6032579885407185,
      g: 0.5455798324979868,
      b: 0.20101906484700027,
    },
    output: [1],
  },
  {
    input: {
      r: 0.6054628054282802,
      g: 0.9627482145963195,
      b: 0.5856786935583602,
    },
    output: [0],
  },
  {
    input: {
      r: 0.6583641521049173,
      g: 0.23386586025885192,
      b: 0.7470604388131248,
    },
    output: [1],
  },
  {
    input: {
      r: 0.22446200139516348,
      g: 0.36895130212879024,
      b: 0.06464594208467878,
    },
    output: [1],
  },
  {
    input: {
      r: 0.9370159661035968,
      g: 0.8898600473208098,
      b: 0.32254223467270937,
    },
    output: [0],
  },
  {
    input: {
      r: 0.41312443724297476,
      g: 0.11871023034738393,
      b: 0.5070527747434495,
    },
    output: [1],
  },
  {
    input: {
      r: 0.4082460362396805,
      g: 0.5247005741662774,
      b: 0.851899052399745,
    },
    output: [1],
  },
  {
    input: {
      r: 0.7339510804173515,
      g: 0.24074856765898134,
      b: 0.6231010080196768,
    },
    output: [1],
  },
  {
    input: {
      r: 0.8135414656247757,
      g: 0.3016742481803263,
      b: 0.32043895845482817,
    },
    output: [1],
  },
  {
    input: {
      r: 0.21986581733631527,
      g: 0.0033287306350342494,
      b: 0.2907515107611558,
    },
    output: [1],
  },
  {
    input: {
      r: 0.9651248146089415,
      g: 0.21948224554120133,
      b: 0.7752736850046058,
    },
    output: [0],
  },
  {
    input: {
      r: 0.15387354474584702,
      g: 0.658986364344313,
      b: 0.637007138120145,
    },
    output: [1],
  },
  {
    input: {
      r: 0.1589107676697341,
      g: 0.9651507719697547,
      b: 0.29962248497416843,
    },
    output: [0],
  },
  {
    input: {
      r: 0.41692791185691447,
      g: 0.7443400139505105,
      b: 0.9018206833480544,
    },
    output: [0],
  },
  {
    input: {
      r: 0.9274738678912524,
      g: 0.4618390191031101,
      b: 0.11085051633750109,
    },
    output: [0],
  },
  {
    input: {
      r: 0.3715505848056373,
      g: 0.3739782705677679,
      b: 0.10217024131121466,
    },
    output: [1],
  },
  {
    input: {
      r: 0.877287941546552,
      g: 0.9541322062438695,
      b: 0.31485262713584583,
    },
    output: [0],
  },
  {
    input: {
      r: 0.3262337405984894,
      g: 0.3606448617303659,
      b: 0.9054236300851632,
    },
    output: [1],
  },
  {
    input: {
      r: 0.33560287134721456,
      g: 0.23375469909801505,
      b: 0.3370670343128499,
    },
    output: [1],
  },
  {
    input: {
      r: 0.033958005333385,
      g: 0.9702286304013124,
      b: 0.6305718802556117,
    },
    output: [0],
  },
  {
    input: {
      r: 0.5731115097779367,
      g: 0.840214716623572,
      b: 0.501697155530985,
    },
    output: [0],
  },
  {
    input: {
      r: 0.7958771827505167,
      g: 0.9252602410215549,
      b: 0.7566269518886186,
    },
    output: [0],
  },
  {
    input: {
      r: 0.38403681630686903,
      g: 0.025038438635959448,
      b: 0.2643621152198641,
    },
    output: [1],
  },
  {
    input: {
      r: 0.5180700725864571,
      g: 0.611704749793353,
      b: 0.9448403016896438,
    },
    output: [1],
  },
  {
    input: {
      r: 0.7778637010406348,
      g: 0.21564328762067797,
      b: 0.7214422564256733,
    },
    output: [0],
  },
  {
    input: {
      r: 0.9030627499656678,
      g: 0.5626677049253612,
      b: 0.01439350309841858,
    },
    output: [0],
  },
  {
    input: {
      r: 0.9612474915078224,
      g: 0.9342445258840182,
      b: 0.2730913594562798,
    },
    output: [0],
  },
  {
    input: {
      r: 0.819226918500995,
      g: 0.6128938238677808,
      b: 0.927967861675236,
    },
    output: [0],
  },
  {
    input: {
      r: 0.0932697535198419,
      g: 0.022297620705993282,
      b: 0.6777721344692322,
    },
    output: [1],
  },
  {
    input: {
      r: 0.427021356950968,
      g: 0.026730271995966115,
      b: 0.6726841664417142,
    },
    output: [1],
  },
  {
    input: {
      r: 0.980854311019115,
      g: 0.045673413488033665,
      b: 0.7384025220227302,
    },
    output: [1],
  },
  {
    input: {
      r: 0.5435240555426415,
      g: 0.04515400420629345,
      b: 0.4254202750803808,
    },
    output: [1],
  },
  {
    input: {
      r: 0.39469361418370874,
      g: 0.6214044797064424,
      b: 0.08255504781271727,
    },
    output: [1],
  },
  {
    input: {
      r: 0.11423535227513604,
      g: 0.6317046478720105,
      b: 0.4183720162033191,
    },
    output: [1],
  },
  {
    input: {
      r: 0.7584710160850081,
      g: 0.41392740643314996,
      b: 0.7533505461320593,
    },
    output: [1],
  },
  {
    input: {
      r: 0.21459312725976631,
      g: 0.26990195511501436,
      b: 0.8521350220878849,
    },
    output: [1],
  },
  {
    input: {
      r: 0.05542404253677602,
      g: 0.5360658602698347,
      b: 0.5830929364566237,
    },
    output: [1],
  },
  {
    input: {
      r: 0.8858212226681095,
      g: 0.16709582380696442,
      b: 0.6466852936694747,
    },
    output: [1],
  },
];

net.train(data);

const colorEl = document.getElementById("color");
const guessEl = document.getElementById("guess");
const whiteButton = document.getElementById("white-button");
const blackButton = document.getElementById("black-button");
const printButton = document.getElementById("print-button");

let color;

setRandomColor();
whiteButton.addEventListener("click", () => {
  chooseColor(1);
});

blackButton.addEventListener("click", () => {
  chooseColor(0);
});

printButton.addEventListener("click", print);

function chooseColor(value) {
  data.push({
    input: color,
    output: [value],
  });
  setRandomColor();
}

function print() {
  console.log(JSON.stringify(data));
}

function setRandomColor() {
  color = {
    r: Math.random(),
    g: Math.random(),
    b: Math.random(),
  };
  const guess = net.run(color)[0];
  guessEl.style.color = guess > 0.5 ? "#FFF" : "#000";
  colorEl.style.backgroundColor = `rgba(${color.r * 255}, ${color.g * 255}, ${
    color.b * 255
  })`;
}
